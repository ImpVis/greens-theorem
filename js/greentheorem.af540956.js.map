{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/GreenTheorem/GreenTheorem.vue?9c2a","webpack:///./vue.config.js","webpack:///./src/GreenTheorem/GreenTheorem.vue?e7d3","webpack:///src/GreenTheorem/GreenTheorem.vue","webpack:///./src/GreenTheorem/GreenTheorem.vue?56d9","webpack:///./src/GreenTheorem/GreenTheorem.vue","webpack:///./src/GreenTheorem/main.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","installedCssChunks","jsonpScriptSrc","p","exports","module","l","e","promises","cssChunks","Promise","resolve","reject","href","fullhref","existingLinkTags","document","getElementsByTagName","tag","dataHref","getAttribute","rel","existingStyleTags","linkTag","createElement","type","onload","onerror","event","request","target","src","err","Error","code","parentNode","removeChild","head","appendChild","then","installedChunkData","promise","onScriptComplete","script","charset","timeout","nc","setAttribute","error","clearTimeout","chunk","errorType","realSrc","message","name","undefined","setTimeout","all","m","c","d","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","oe","console","jsonpArray","window","oldJsonpFunction","slice","publicPath","pages","index","entry","title","introduction","divergence","curl","circulation","greentheorem","generalisedgreentheorem","stoketheorem","render","_vm","this","_h","$createElement","_c","_self","attrs","pageName","vue_config","scopedSlots","_u","fn","_v","staticStyle","staticClass","on","changeSlider","proxy","staticRenderFns","component","Vue","config","productionTip","use","ImpVis","ImpVisKatex","h","$mount"],"mappings":"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","file":"js/greentheorem.af540956.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded CSS chunks\n \tvar installedCssChunks = {\n \t\t\"greentheorem\": 0\n \t}\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"greentheorem\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"js/\" + ({}[chunkId]||chunkId) + \".\" + {\"chunk-2d0c4639\":\"4790a3d3\",\"chunk-76e94462\":\"30e7b526\"}[chunkId] + \".js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// mini-css-extract-plugin CSS loading\n \t\tvar cssChunks = {\"chunk-76e94462\":1};\n \t\tif(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);\n \t\telse if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {\n \t\t\tpromises.push(installedCssChunks[chunkId] = new Promise(function(resolve, reject) {\n \t\t\t\tvar href = \"css/\" + ({}[chunkId]||chunkId) + \".\" + {\"chunk-2d0c4639\":\"31d6cfe0\",\"chunk-76e94462\":\"0616178c\"}[chunkId] + \".css\";\n \t\t\t\tvar fullhref = __webpack_require__.p + href;\n \t\t\t\tvar existingLinkTags = document.getElementsByTagName(\"link\");\n \t\t\t\tfor(var i = 0; i < existingLinkTags.length; i++) {\n \t\t\t\t\tvar tag = existingLinkTags[i];\n \t\t\t\t\tvar dataHref = tag.getAttribute(\"data-href\") || tag.getAttribute(\"href\");\n \t\t\t\t\tif(tag.rel === \"stylesheet\" && (dataHref === href || dataHref === fullhref)) return resolve();\n \t\t\t\t}\n \t\t\t\tvar existingStyleTags = document.getElementsByTagName(\"style\");\n \t\t\t\tfor(var i = 0; i < existingStyleTags.length; i++) {\n \t\t\t\t\tvar tag = existingStyleTags[i];\n \t\t\t\t\tvar dataHref = tag.getAttribute(\"data-href\");\n \t\t\t\t\tif(dataHref === href || dataHref === fullhref) return resolve();\n \t\t\t\t}\n \t\t\t\tvar linkTag = document.createElement(\"link\");\n \t\t\t\tlinkTag.rel = \"stylesheet\";\n \t\t\t\tlinkTag.type = \"text/css\";\n \t\t\t\tlinkTag.onload = resolve;\n \t\t\t\tlinkTag.onerror = function(event) {\n \t\t\t\t\tvar request = event && event.target && event.target.src || fullhref;\n \t\t\t\t\tvar err = new Error(\"Loading CSS chunk \" + chunkId + \" failed.\\n(\" + request + \")\");\n \t\t\t\t\terr.code = \"CSS_CHUNK_LOAD_FAILED\";\n \t\t\t\t\terr.request = request;\n \t\t\t\t\tdelete installedCssChunks[chunkId]\n \t\t\t\t\tlinkTag.parentNode.removeChild(linkTag)\n \t\t\t\t\treject(err);\n \t\t\t\t};\n \t\t\t\tlinkTag.href = fullhref;\n\n \t\t\t\tvar head = document.getElementsByTagName(\"head\")[0];\n \t\t\t\thead.appendChild(linkTag);\n \t\t\t}).then(function() {\n \t\t\t\tinstalledCssChunks[chunkId] = 0;\n \t\t\t}));\n \t\t}\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([6,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GreenTheorem.vue?vue&type=style&index=0&lang=css&\"","module.exports = {\n    publicPath:'./',\n    pages:{\n        index:{\n            entry:'src/main.js',\n            title:'Index'\n        },\n            introduction:{\n                entry:'src/Introduction/main.js',\n                title:'Introduction',\n                \n            },\n            divergence:{\n                entry:'src/Divergence/main.js',\n                title:'Divergence',\n                \n            },\n            curl:{\n                entry:'src/Curl/main.js',\n                title:'Curl',\n                \n            },\n            circulation:{\n                entry:'src/Circulation/main.js',\n                title:'Circulation',\n                \n            },\n            greentheorem:{\n                entry:'src/GreenTheorem/main.js',\n                title:'GreenTheorem',\n                \n            },\n            generalisedgreentheorem:{\n                entry:'src/GeneralisedGreenTheorem/main.js',\n                title:'GeneralisedGreenTheorem',\n                \n            },\n            stoketheorem:{\n                entry:'src/StokeTheorem/main.js',\n                title:'StokeTheorem',\n                \n            },\n    }\n}","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('iv-visualisation',{attrs:{\"title\":_vm.pageName,\"vue_config\":_vm.vue_config,\"page_number\":5},scopedSlots:_vm._u([{key:\"hotspots\",fn:function(){return [_c('iv-pane',{attrs:{\"position\":\"left\",\"format\":\"full\"}},[_c('iv-sidebar-content',{attrs:{\"showPagination\":true}},[_c('iv-sidebar-section',{attrs:{\"title\":\"Green's Theorem\",\"icon\":\"book-open\"}},[_vm._v(\" The arrows for microscopic circulation are colour-coded. \"),_c('br'),_c('br'),_vm._v(\" From the diagram, we can see that every arrow inside the grid is paired with an arrow with opposite direction. In other words, all the \"),_c('span',{staticStyle:{\"color\":\"#FF00FF\"}},[_c('b',[_vm._v(\"magenta\")])]),_vm._v(\" arrows will cancel each other and we are left with \"),_c('span',{staticStyle:{\"color\":\"#008000\"}},[_c('b',[_vm._v(\"green\")])]),_vm._v(\" arrows. \"),_c('br'),_c('br'),_vm._v(\" The relationship between macroscopic and microscopic circulation becomes apparent. After the cancellation, we are left with macroscopic circulation. This link is named \"),_c('b',[_vm._v(\"Green's Theorem\")]),_vm._v(\": \"),_c('div',{staticClass:\"center\"},[_c('iv-equation-box',{attrs:{\"equation\":\"\\\\oint_C \\\\mathbf{A} \\\\cdot \\\\, d\\\\mathbf{r} = \\\\iint_D (\\\\nabla \\\\times \\\\mathbf{A}) \\\\cdot \\\\mathbf{\\\\hat{k}} \\\\, dS.\"}})],1),_vm._v(\" Where \"),_c('iv-equation-box',{staticClass:\"in-line-eqn\",attrs:{\"stylise\":false,\"equation\":\"\\\\mathbf{A}\"}}),_vm._v(\" is the vector field defined for the area inside the closed curve, \"),_c('iv-equation-box',{staticClass:\"in-line-eqn\",attrs:{\"stylise\":false,\"equation\":\"D\"}}),_vm._v(\". \"),_c('br'),_c('br'),_vm._v(\" For \"),_c('iv-equation-box',{staticClass:\"in-line-eqn\",attrs:{\"stylise\":false,\"equation\":\"\\\\mathbf{A} = (P,Q,R)\"}}),_vm._v(\", Green's Theorem is reduced to, \"),_c('div',{staticClass:\"center\"},[_c('iv-equation-box',{attrs:{\"equation\":\"\\\\oint_C \\\\,P(x,y(x))\\\\,dx + Q(x,x(y))\\\\,dy \\n                            \\\\\\\\ = \\\\\\\\\\n                            \\\\iint_D \\\\left[ \\\\frac{\\\\partial Q}{\\\\partial x}(x,\\\\,y) - \\\\frac{\\\\partial P}{\\\\partial y}(x,\\\\,y) \\\\right] \\\\,dx\\\\,dy\"}})],1)],1),_c('iv-sidebar-section',{attrs:{\"title\":\"Instructions\",\"theme\":\"Lime\"}},[_vm._v(\" The graph shows the relationship between microscopic circulation and macroscopic circulation. From the graph you can see by adding up the microscopic circulations, the inner arrows will cancel with each other. Hence the sole effect of piling up the microscopic circulations will be the macroscopic circulation. \"),_c('br'),_c('br'),_vm._v(\" By changing the slider, more microscopic circulations will be added in the graph. \")])],1)],1),_c('iv-fixed-hotspot',{attrs:{\"position\":\"bottom\",\"transparent\":\"\"}},[_c('iv-slider',{attrs:{\"id\":\"circSlider\",\"name\":\"Number of micro circulations\",\"min\":2,\"max\":7,\"step\":1,\"tick_step\":1,\"init_val\":2},on:{\"sliderChanged\":_vm.changeSlider}})],1)]},proxy:true}])},[_c('div',{staticClass:\"center\",staticStyle:{\"padding-top\":\"50px\"}},[_c('div',{staticStyle:{\"width\":\"450px\",\"height\":\"450px\"},attrs:{\"id\":\"graph\"}})])])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div>\r\n        <iv-visualisation :title=\"pageName\" :vue_config=\"vue_config\" :page_number=\"5\">\r\n            <template #hotspots>\r\n                <iv-pane position=\"left\" format=\"full\">\r\n                    <iv-sidebar-content :showPagination=\"true\">\r\n                        <iv-sidebar-section title=\"Green's Theorem\" icon=\"book-open\">\r\n                            The arrows for microscopic circulation are colour-coded. <br><br>\r\n\r\n                            From the diagram, we can see that every arrow inside the grid is paired with an arrow with opposite\r\n                            direction. In other words, all the <span style=\"color:#FF00FF\"><b>magenta</b></span> arrows will\r\n                            cancel each other and we are left with <span style=\"color:#008000\"><b>green</b></span> arrows. <br><br>\r\n\r\n                            The relationship between macroscopic and microscopic circulation becomes apparent. After the\r\n                            cancellation, we are left with macroscopic circulation. This link is named <b>Green's Theorem</b>:\r\n\r\n                            <div class=\"center\">\r\n                                <iv-equation-box equation=\"\\oint_C \\mathbf{A} \\cdot \\, d\\mathbf{r} = \\iint_D (\\nabla \\times \\mathbf{A}) \\cdot \\mathbf{\\hat{k}} \\, dS.\" />\r\n                            </div>\r\n\r\n                            Where <iv-equation-box class=\"in-line-eqn\" :stylise=\"false\" equation=\"\\mathbf{A}\" /> is the vector field defined for the area inside the closed curve, <iv-equation-box class=\"in-line-eqn\" :stylise=\"false\" equation=\"D\" />. <br><br>\r\n\r\n                            For <iv-equation-box class=\"in-line-eqn\" :stylise=\"false\" equation=\"\\mathbf{A} = (P,Q,R)\" />, Green's Theorem is reduced to, \r\n\r\n                            <div class=\"center\">\r\n                                <iv-equation-box equation=\"\\oint_C \\,P(x,y(x))\\,dx + Q(x,x(y))\\,dy \r\n                                \\\\ = \\\\\r\n                                \\iint_D \\left[ \\frac{\\partial Q}{\\partial x}(x,\\,y) - \\frac{\\partial P}{\\partial y}(x,\\,y) \\right] \\,dx\\,dy\" />\r\n                            </div>\r\n                        </iv-sidebar-section>\r\n\r\n                        <iv-sidebar-section title=\"Instructions\" theme=\"Lime\">\r\n                            The graph shows the relationship between microscopic circulation and macroscopic circulation. From the graph you can see by adding up the microscopic circulations, the inner arrows will cancel with each other. Hence the sole effect of piling up the microscopic circulations will be the macroscopic circulation. <br><br>\r\n                            \r\n                            By changing the slider, more microscopic circulations will be added in the graph.\r\n                        </iv-sidebar-section>\r\n                    </iv-sidebar-content>\r\n                </iv-pane>\r\n\r\n                <!-- Slider -->\r\n                <iv-fixed-hotspot position=\"bottom\" transparent>\r\n                    <iv-slider id=\"circSlider\" name=\"Number of micro circulations\" :min=\"2\" :max=\"7\" :step=\"1\" :tick_step=\"1\" :init_val=\"2\" @sliderChanged=\"changeSlider\" />\r\n                </iv-fixed-hotspot>\r\n            </template>\r\n\r\n            <!-- Graph -->\r\n            <div class=\"center\" style=\"padding-top: 50px;\">\r\n                <div id=\"graph\" style=\"width:450px; height:450px;\"></div>\r\n            </div>\r\n        </iv-visualisation>\r\n    </div>\r\n</template>\r\n<script>\r\nimport vue_config from '../../vue.config.js'\r\nimport Plotly from 'plotly.js-dist'\r\nimport $ from 'jquery';\r\nimport * as math from 'mathjs';\r\nimport numeric from 'numeric';\r\n\r\nexport default {\r\n    name:\"greentheorem\",\r\n    data() {\r\n        return {\r\n            pageName:\"Green's Theorem\",\r\n            vue_config,\r\n            numOfArrows: 2,\r\n            redrawPlot: false,\r\n        };\r\n    },\r\n    methods: {\r\n        changeSlider(e) {\r\n            this.numOfArrows = e;\r\n            this.redrawPlot = true;\r\n        }\r\n    },\r\n    mounted() {    \r\n        let v = this;\r\n\r\n        // Colour definitions:\r\n        let magenta = \"#FF00FF\",\r\n            // blue = \"#0000FF\",\r\n            green = \"#008000\";\r\n            // impBlue = \"#003E74\",\r\n            // black = \"rgb(0,0,0)\",\r\n            // white = \"rgb(255,255,255)\",\r\n            // cyan = \"rgb(0,146,146)\", //1\r\n            // lilac = \"rgb(182,109,255)\", //2\r\n            // orange = \"rgb(219,209,0)\", //3\r\n            // orange2 = \"rgb(240,150,0)\"; //3\r\n\r\n        // Plot Utilities:\r\n        /**\r\n         * sets camera options in layout.\r\n         * @param {array} point - point of viewpoint.\r\n         */\r\n        // function createView(point) {\r\n        // let norm = Math.sqrt(point[0]*point[0] + (5*point[1])*(5*point[1]) + point[2]*point[2]);\r\n        // let a = 0.5 + point[0]/norm, b = 1 +  5*point[1]/norm, c = 0.5 + point[2]/norm;\r\n        // let camera = {\r\n        //     up: {x: 0, y: 0, z: 1},\r\n        //     eye: {x: -a, y: -b, z: c + 0.5},\r\n        //     center: {x: 0, y: 0, z: -0.2}\r\n        // }\r\n        // return camera\r\n        // }\r\n        /**\r\n         * Creates Axes Object.\r\n         * @param {float} length - length of the half axes.\r\n         */\r\n        // function createAxes(length) {\r\n        //     let axes = [];\r\n        //     let vector = [0, length];\r\n        //     let initialVec;\r\n        //     let vecString = [\"x\", \"y\", \"z\"];\r\n        //     let originString = [\"\", \"\", \"(0,0,0)\"];\r\n        //     for (let i = 0; i < 3; ++i) {\r\n        //         initialVec = [[0, 0], [0, 0], [0, 0]];\r\n        //         initialVec[i] = vector;\r\n        //         axes.push(\r\n        //             {\r\n        //                 type: \"scatter3d\",\r\n        //                 mode: \"lines+text\",\r\n        //                 x: initialVec[0],\r\n        //                 y: initialVec[1],\r\n        //                 z: initialVec[2],\r\n        //                 line: {color: \"rgb(0,0,0)\", width: 4},\r\n        //                 text: [originString[i], vecString[i]],\r\n        //                 textfont: {size: 15},\r\n        //                 textposition: \"top\"\r\n        //             }\r\n        //         );\r\n        //     }\r\n        //     return axes;\r\n        // }\r\n\r\n        // Change of Basis:\r\n        /**\r\n         * changes spherical to cartesian coordinates\r\n         * @param {float} r - r.\r\n         * @param {float} theta - theta.\r\n         * @param {float} phi - phi.\r\n         */\r\n        // function sp2c(r,theta,phi) {\r\n        //     return [\r\n        //         r * Math.sin(theta) * Math.cos(phi),\r\n        //         r * Math.sin(theta) * Math.sin(phi),\r\n        //         r * Math.cos(theta)\r\n        //     ];\r\n        // }\r\n        /**\r\n         * changes cartesian to spherical coordinates\r\n         * @param {float} x - x.\r\n         * @param {float} y - y.\r\n         * @param {float} z - z.\r\n         */\r\n        // function c2sp(x,y,z) {\r\n        //     let r = 0, theta = 0, phi = 0;\r\n        //     if (x*x + y*y + z*z !== 0) {\r\n        //         r = Math.sqrt(x*x + y*y + z*z);\r\n        //         theta = Math.acos(z/r);\r\n        //         phi = Math.atan2(y,x);\r\n        //     }\r\n        //     return [r, theta, phi];\r\n        // }\r\n        /**\r\n         * changes polar to cartesian coordinates\r\n         * @param {float} rho - rho.\r\n         * @param {float} phi - phi.\r\n         */\r\n        function p2c(rho, phi) {\r\n            return [\r\n                rho * Math.cos(phi),\r\n                rho * Math.sin(phi)\r\n            ];\r\n        }\r\n        /**\r\n         * changes cartesian to polar coordinates\r\n         * @param {float} x - x.\r\n         * @param {float} y - y.\r\n         */\r\n        function c2p(x,y) {\r\n            let rho = 0, phi = 0;\r\n            if (x*x + y*y !== 0) {\r\n                rho = Math.sqrt(x*x + y*y);\r\n                phi = Math.atan2(y,x);\r\n            }\r\n            return [rho, phi];\r\n        }\r\n\r\n\r\n        // function addText(data, textPosition=[0,0,0], text=\"\", color=\"rgb(0,0,0)\", size=16){\r\n        //     if (textPosition.length === 3) {\r\n        //         data.push({\r\n        //             type: \"scatter3d\",\r\n        //             mode: \"lines+text\",\r\n        //             x: [textPosition[0]],\r\n        //             y: [textPosition[1]],\r\n        //             z: [textPosition[2]],\r\n        //             line: {width: 0},\r\n        //             text: [text],\r\n        //             textfont: {color:color, size:size},\r\n        //             opacity: 1\r\n        //         });\r\n        //     } else if (textPosition.length === 2) {\r\n        //         data.push({\r\n        //             type: \"scatter\",\r\n        //             mode: \"lines+text\",\r\n        //             x: [textPosition[0]],\r\n        //             y: [textPosition[1]],\r\n        //             line: {width: 0},\r\n        //             text: [text],\r\n        //             textfont: {color:color, size:size},\r\n        //             opacity: 1\r\n        //         });\r\n        //     } else {\r\n        //         return 1;\r\n        //     }\r\n        //     return 0;\r\n        // }\r\n\r\n        ///Shape Objects:\r\n        //3D Objects:\r\n        /**\r\n         * Represents a line.\r\n         * @constructor\r\n         * @param {list} points - list of the points in the line.\r\n         */\r\n        // function Line(points) {\r\n        //     this.x = [];\r\n        //     this.y = [];\r\n        //     this.z = [];\r\n        //     for (let i = 0; i  < points.length; ++i) {\r\n        //         this.x.push(points[i][0]);\r\n        //         this.y.push(points[i][1]);\r\n        //         this.z.push(points[i][2]);\r\n        //     }\r\n\r\n        //     this.gObject = function(color, width=7, dash=\"solid\") {\r\n        //         let lineObject = {\r\n        //             type: \"scatter3d\",\r\n        //             mode: \"lines\",\r\n        //             x: this.x,\r\n        //             y: this.y,\r\n        //             z: this.z,\r\n        //             line: {color: color, width: width, dash:dash}\r\n        //         }\r\n        //         return lineObject;\r\n        //     }\r\n\r\n        //     this.arrowHead = function(color, width=7, wingLen=0.1, dash=\"solid\") {\r\n        //         let lastElm = this.x.length - 1;\r\n        //         let [r, theta, phi] = c2sp(this.x[lastElm]-this.x[0], this.y[lastElm]-this.y[0], this.z[lastElm]-this.z[0]);\r\n        //         let offset = [this.x[0], this.y[0], this.z[0]];\r\n        //         let frac = wingLen*r;\r\n        //         let sin45 = Math.sin(Math.PI/4);\r\n        //         let d = r - frac * sin45;\r\n        //         let wingLength = Math.sqrt(Math.pow(frac*sin45,2) + d*d);\r\n        //         let wingAngle = Math.acos(d/wingLength);\r\n\r\n\r\n        //         let wings_xyz = [\r\n        //             math.add(sp2c(wingLength, theta + wingAngle, phi), offset),\r\n        //             math.add(sp2c(wingLength, theta - wingAngle, phi), offset)\r\n        //         ];\r\n\r\n        //         let wings = {\r\n        //             type: \"scatter3d\",\r\n        //             mode: \"lines\",\r\n        //             x: [wings_xyz[0][0], this.x[lastElm], wings_xyz[1][0]],\r\n        //             y: [wings_xyz[0][1], this.y[lastElm], wings_xyz[1][1]],\r\n        //             z: [wings_xyz[0][2], this.z[lastElm], wings_xyz[1][2]],\r\n        //             line: {color: color, width: width}\r\n        //         }\r\n\r\n        //         return wings;\r\n        //     }\r\n        // }\r\n        /**\r\n         * Represents a point.\r\n         * @constructor\r\n         * @param {array} position - position of the point.\r\n         */\r\n        // function Point(position) {\r\n        //     this.position = position;\r\n        //     this.gObject = function(color, size = 7, symbol=\"circle\") {\r\n        //         let pointObject = {\r\n        //             type: \"scatter3d\",\r\n        //             mode: \"markers\",\r\n        //             x: [this.position[0]],\r\n        //             y: [this.position[1]],\r\n        //             z: [this.position[2]],\r\n        //             marker: {\"color\": color, \"size\": size, \"symbol\": symbol}\r\n        //         }\r\n        //         return pointObject;\r\n        //     }\r\n        // }\r\n        /**\r\n         * Represents a sphere.\r\n         * @constructor\r\n         * @param {float} radius - radius of the sphere.\r\n         */\r\n        // function Sphere(radius) {\r\n        //     this.radius = radius;\r\n        //     let meshSize = 20;\r\n        //     let theta = numeric.linspace(0, Math.PI, meshSize);\r\n        //     let phi = numeric.linspace(0, 2*Math.PI, meshSize);\r\n        //     this.x = [], this.y = [], this.z = [];\r\n        //     for(let i = 0; i < meshSize; ++i) {\r\n        //         this.x[i] = [], this.y[i] = [], this.z[i] = [];\r\n        //         for(let j = 0; j < meshSize; ++j) {\r\n        //             this.x[i].push(radius*Math.cos(phi[i])*Math.sin(theta[j]));\r\n        //             this.y[i].push(radius*Math.sin(phi[i])*Math.sin(theta[j]));\r\n        //             this.z[i].push(radius*Math.cos(theta[j]));\r\n        //         }\r\n        //     }\r\n        //     this.gObject = function(color1, color2) {\r\n        //         let sphere = {\r\n        //             type: \"surface\",\r\n        //             x: this.x,\r\n        //             y: this.y,\r\n        //             z: this.z,\r\n        //             showscale: false,\r\n        //             opacity: 0.6,\r\n        //             colorscale: [[0.0, color1], [1.0, color2]]\r\n        //         }\r\n        //         return sphere;\r\n        //     }\r\n        // }\r\n        /**\r\n         * Represents a cylinder.\r\n         * @constructor\r\n         * @param {float} radius - radius of the circular cross-section.\r\n         * @param {float} height - height of the cylinder.\r\n         */\r\n        // function Cylinder(radius, height){\r\n        //     this.radius = radius;\r\n        //     this.height = height;\r\n        //     let meshSize = radius * 10;\r\n        //     if (meshSize === 0) {meshSize = 2;}\r\n        //     let phi = numeric.linspace(0, 2*Math.PI, meshSize);\r\n        //     this.x = [], this.y = [], this.z = [];\r\n        //     let hValue = numeric.linspace(-height, height, meshSize);\r\n\r\n        //     let xTemp = [], yTemp = [], zTemp = [];\r\n        //     for(let i = 0; i < meshSize; ++i) {\r\n        //         xTemp.push(radius*Math.cos(phi[i]));\r\n        //         yTemp.push(radius*Math.sin(phi[i]));\r\n        //     }\r\n        //     for(let i = 0; i < meshSize; ++i) {\r\n        //         this.x.push(xTemp);\r\n        //         this.y.push(yTemp);\r\n        //         this.z.push(numeric.rep([meshSize], hValue[i]));\r\n        //     }\r\n\r\n        //     this.gObjectCurve = function(color1, color2) {\r\n        //         let curve = {\r\n        //             type: \"surface\",\r\n        //             x: this.x,\r\n        //             y: this.y,\r\n        //             z: this.z,\r\n        //             showscale: false,\r\n        //             opacity: 0.7,\r\n        //             colorscale: [[0.0, color1], [1.0, color2]]\r\n        //         }\r\n        //         return curve;\r\n        //     }\r\n        //     this.gObjectTop = function(color) {\r\n        //         let top = {\r\n        //             type: \"scatter3d\",\r\n        //             mode: \"lines\",\r\n        //             x: this.x[0],\r\n        //             y: this.y[0],\r\n        //             z: this.z[meshSize - 1],\r\n        //             line: {color: color.slice(0, -1) + \",0.2)\", width: 1},\r\n        //             surfaceaxis: 2,\r\n        //             opacity: 0.5\r\n        //         }\r\n        //         return top;\r\n        //     }\r\n        //     this.gObjectBottom = function(color) {\r\n        //         let bottom = {\r\n        //             type: \"scatter3d\",\r\n        //             mode: \"lines\",\r\n        //             x: this.x[0],\r\n        //             y: this.y[0],\r\n        //             z: this.z[0],\r\n        //             line: {color: color.slice(0, -1) + \",0.7)\", width: 1},\r\n        //             surfaceaxis: 2,\r\n        //             opacity: 0.7\r\n        //         }\r\n        //         return bottom;\r\n        //     }\r\n        // }\r\n        /**\r\n         * Represents a cuboid.\r\n         * @constructor\r\n         * @param {float} x - half length of cuboid in x-direction.\r\n         * @param {float} y - half length of cuboid in y-direction.\r\n         * @param {float} z - half length of cuboid in z-direction.\r\n         */\r\n        // function Cuboid(x, y, z){\r\n        //     this.width = x,\r\n        //     this.length = y,\r\n        //     this.height = z,\r\n        //     this.gObject = function(color) {\r\n        //         let cuboid = {\r\n        //             type: \"mesh3d\",\r\n        //             x: [-x, -x, x, x, -x, -x, x, x],\r\n        //             y: [-y, y, y, -y, -y, y, y, -y],\r\n        //             z: [-z, -z, -z, -z, z, z, z, z],\r\n        //             i : [0, 0, 3, 4, 4, 4, 4, 4, 5, 6, 6, 7],\r\n        //             j : [2, 3, 4, 3, 6, 7, 1, 5, 2, 2, 7, 3],\r\n        //             k : [1, 2, 0, 7, 5, 6, 0, 1, 1, 5, 2, 2],\r\n        //             opacity: 0.5,\r\n        //             colorscale: [['0', color], ['1', \"rgb(255,255,255)\"]],\r\n        //             intensity: [0, 0.1, 0.3, 0.5, 0.7, 0.8, 0.9, 1],\r\n        //             showscale: false\r\n        //         }\r\n        //         return cuboid\r\n        //     }\r\n        // }\r\n        //2D Objects:\r\n        /**\r\n         * Represents a circle.\r\n         * @constructor\r\n         * @param {float} radius - radius of the circle.\r\n         */\r\n        // function Circle(radius) {\r\n        //     this.radius = radius;\r\n\r\n        //     this.gObject = function(color=cyan, centre=[0,0]) {\r\n        //         let phi = numeric.linspace(0, 2*Math.PI, 40);\r\n        //         let x = [], y = [];\r\n        //         for (let i=0, n=phi.length; i<n; ++i) {\r\n        //             x.push(this.radius*Math.cos(phi[i]) + centre[0]);\r\n        //             y.push(this.radius*Math.sin(phi[i]) + centre[1]);\r\n        //         }\r\n        //         let circle = {\r\n        //             type: \"scatter\",\r\n        //             mode: \"lines\",\r\n        //             x: x,\r\n        //             y: y,\r\n        //             line: {simplify: false, color: color},\r\n        //             fill:'toself',\r\n        //             opacity: 0.5\r\n        //         }\r\n        //         return circle;\r\n        //     }\r\n        // }\r\n        /**\r\n         * Represents a rectangle.\r\n         * @constructor\r\n         * @param {float} x0 - width (x direction).\r\n         * @param {float} y0 - length (y direction).\r\n         */\r\n        // function Rectangle(x0, y0) {\r\n        //     this.x0 = x0;\r\n        //     this.y0 = y0;\r\n\r\n        //     this.gObject = function(color=cyan, centre=[0,0]) {\r\n        //         let rectangle = {\r\n        //             type: \"scatter\",\r\n        //             mode: \"lines\",\r\n        //             x: [0, this.x0, this.x0, 0, 0],\r\n        //             y: [0, 0, this.y0, this.y0, 0],\r\n        //             line: {simplify: false, color: color},\r\n        //             fill:'toself',\r\n        //             opacity: 0.5\r\n        //         }\r\n        //         return rectangle;\r\n        //     }\r\n        // }\r\n        /**\r\n         * Represents a line.\r\n         * @constructor\r\n         * @param {list} points - list of the points in the line.\r\n         */\r\n        function Line2d(points) {\r\n            this.x = [];\r\n            this.y = [];\r\n\r\n            for (let i = 0; i  < points.length; ++i) {\r\n                this.x.push(points[i][0]);\r\n                this.y.push(points[i][1]);\r\n            }\r\n\r\n            this.gObject = function(color, width=7, dash=\"solid\") {\r\n                let lineObject = {\r\n                    type: \"scatter\",\r\n                    mode: \"lines\",\r\n                    x: this.x,\r\n                    y: this.y,\r\n                    line: {color: color, width: width, dash:dash}\r\n                }\r\n                return lineObject;\r\n            }\r\n\r\n            this.arrowHead = function(color, width=7, dash=\"solid\") {\r\n                let lastElm = this.x.length - 1;\r\n                let [rho, phi] = c2p(this.x[lastElm] - this.x[0], this.y[lastElm] - this.y[0]);\r\n                let offset = [this.x[0], this.y[0]];\r\n                let frac = 0.2*rho;\r\n                let sin45 = Math.sin(Math.PI/4);\r\n                let d = rho - frac * sin45;\r\n                let wingLength = Math.sqrt(Math.pow(frac*sin45,2) + d*d);\r\n                let wingAngle = Math.acos(d/wingLength);\r\n\r\n                let wings_xyz = [\r\n                    math.add(p2c(wingLength, phi + wingAngle), offset),\r\n                    math.add(p2c(wingLength, phi - wingAngle), offset)\r\n                ];\r\n\r\n                let wings = {\r\n                    type: \"scatter\",\r\n                    mode: \"lines\",\r\n                    x: [wings_xyz[0][0], this.x[lastElm], wings_xyz[1][0]],\r\n                    y: [wings_xyz[0][1], this.y[lastElm], wings_xyz[1][1]],\r\n                    line: {color: color, width: width, dash: dash}\r\n                }\r\n\r\n                return wings;\r\n            }\r\n        }\r\n\r\n        //Global Initial Parameters:\r\n        let maxArrowNum = 7;\r\n        let layout = {\r\n            width: 400, height: 400,\r\n            margin: {l:50, r:50, t:50, b:50},\r\n            hovermode: \"closest\",\r\n            showlegend: false,\r\n            xaxis: {label: 'x', range: [-0.5,5]},\r\n            yaxis: {lavel: 'y', range: [-0.5,5]},\r\n            aspectratio: {x:1, y:1}\r\n        };\r\n\r\n        //This is Dom's work, I think it's quite clear\r\n        //He's trying to loop the three functions below to create a set of arrow made squares\r\n        function arrowRect(vertices, numberOfArrows, color1, color2) {\r\n            let rectLength = Math.abs(vertices[1][0] - vertices[0][0]);\r\n            // let arrowLength = rectLength/numberOfArrows;\r\n            let rectX = numeric.linspace(vertices[0][0], vertices[1][0], numberOfArrows+1),\r\n                rectY = numeric.linspace(vertices[1][1], vertices[2][1], numberOfArrows+1);\r\n            let data = [];\r\n\r\n            let injection = rectLength/(9*numberOfArrows);\r\n\r\n            let rectX2 = rectX.slice(),\r\n                rectY2 = rectY.slice();\r\n            rectX2.reverse();\r\n            rectY2.reverse();\r\n\r\n            addArrowsX(data, numberOfArrows, rectX, rectY[0]+injection, color1, 1);\r\n            addArrowsY(data, numberOfArrows, rectX[0]+injection, rectY2, color1, -1);\r\n            addArrowsX(data, numberOfArrows, rectX2, rectY[numberOfArrows]-injection, color1, -1);\r\n            addArrowsY(data, numberOfArrows, rectX[numberOfArrows]-injection, rectY, color1, 1);\r\n\r\n            for (let i=1; i<numberOfArrows; ++i){\r\n                addArrowsX(data, numberOfArrows, rectX, rectY[i]+injection, color2, 1);\r\n                addArrowsY(data, numberOfArrows, rectX[i]+injection, rectY2, color2, -1);\r\n\r\n                addArrowsX(data, numberOfArrows, rectX2, rectY[i]-injection, color2, -1);\r\n                addArrowsY(data, numberOfArrows, rectX[i]-injection, rectY, color2, 1);\r\n            }\r\n\r\n            addEmptyObjects2d(data, maxArrowNum*56 - data.length);\r\n            return data;\r\n        }\r\n\r\n        function addArrowsX(data, numberOfArrows, rectX, fixedY, color, direction=1){\r\n            let arrowTemp;\r\n\r\n            let arrowReduction = 0.15*Math.abs(rectX[1] - rectX[0]);\r\n            for (let i=0; i < numberOfArrows; ++i){\r\n                arrowTemp = new Line2d([[rectX[i]+arrowReduction*direction, fixedY], [rectX[i+1]-arrowReduction*direction, fixedY]]);\r\n                data.push(\r\n                    arrowTemp.gObject(color, 2),\r\n                    arrowTemp.arrowHead(color, 2)\r\n                );\r\n            }\r\n            return;\r\n        }\r\n        function addArrowsY(data, numberOfArrows, fixedX, rectY, color, direction=1){\r\n            let arrowTemp;\r\n            let arrowReduction = 0.15*Math.abs(rectY[1] - rectY[0]);\r\n            for (let i=0; i < numberOfArrows; ++i){\r\n                arrowTemp = new Line2d([[fixedX, rectY[i]+arrowReduction*direction], [fixedX, rectY[i+1]-arrowReduction*direction]]);\r\n                data.push(\r\n                    arrowTemp.gObject(color, 2),\r\n                    arrowTemp.arrowHead(color, 2)\r\n                );\r\n            }\r\n            return;\r\n        }\r\n\r\n        //A function that adds empty objects to the frame\r\n        function addEmptyObjects2d(data, numberObj){\r\n            for (let i=0; i < numberObj; ++i){\r\n                data.push({\r\n                    type: \"scatter\",\r\n                    mode: \"lines\",\r\n                    line: {width: 0}\r\n                });\r\n            }\r\n            return 0;\r\n        }\r\n\r\n        //initial plots\r\n        function initPlot() {\r\n            Plotly.purge(\"graph\");\r\n\r\n            Plotly.newPlot(\"graph\", arrowRect([[0,0],[4,0],[4,4],[0,4]], 2, green, magenta), layout);\r\n\r\n            return;\r\n        }\r\n\r\n        //slider animation\r\n        function updatePlot() {\r\n            // let data = [];\r\n            let numberOfArrows = v.numOfArrows;\r\n\r\n            Plotly.animate(\r\n                'graph',\r\n                {data: arrowRect([[0,0],[4,0],[4,4],[0,4]], numberOfArrows, green, magenta)},\r\n                {\r\n                    fromcurrent: true,\r\n                    transition: {duration: 0,},\r\n                    frame: {duration: 0, redraw: false,},\r\n                    mode: \"afterall\"\r\n                }\r\n            );\r\n        }\r\n\r\n        //load main\r\n        function main() {\r\n            $(\"input[type=range]\").each(function () {\r\n                $(this).on('input', function(){\r\n                    $(\"#\"+$(this).attr(\"id\") + \"Display\").text( $(this).val() + $(\"#\"+$(this).attr(\"id\") + \"Display\").attr(\"data-unit\") );\r\n                    updatePlot();\r\n                });\r\n            });\r\n            initPlot();\r\n        }\r\n\r\n        function redraw() {\r\n            requestAnimationFrame(redraw);\r\n\r\n            if (v.redrawPlot) {\r\n                updatePlot();\r\n                v.redrawPlot = false;\r\n            }\r\n        }\r\n\r\n        main();\r\n        redraw();\r\n    },\r\n}\r\n</script>\r\n<style>\r\n.center {\r\n    display:flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    /* margin-top: 50px; */\r\n}\r\n.in-line-eqn {\r\n    margin-top: -25px;\r\n    margin-bottom: -25px;\r\n}\r\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GreenTheorem.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GreenTheorem.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./GreenTheorem.vue?vue&type=template&id=5a6768b9&\"\nimport script from \"./GreenTheorem.vue?vue&type=script&lang=js&\"\nexport * from \"./GreenTheorem.vue?vue&type=script&lang=js&\"\nimport style0 from \"./GreenTheorem.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue'\nimport ImpVis from '@impvis/components'\nimport '@impvis/components/dist/impvis-components.css'\nimport greentheorem from './GreenTheorem.vue'\nimport ImpVisKatex from \"@impvis/components-katex\"\n\nVue.config.productionTip = false\nVue.use(ImpVis);\nVue.use(ImpVisKatex)\n\n\n\n\nnew Vue({\n    render: h => h(greentheorem),\n  }).$mount('#app')\n  "],"sourceRoot":""}